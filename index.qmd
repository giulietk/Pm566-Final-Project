---
title: "Final Project"
author: "Giuliet Kibler"
description: "Pre-Covid American Dietary Intention and B Vitamins"
output: 
    html_document:
        toc: TRUE
        toc_float: TRUE
---

```{r, echo=FALSE, message=FALSE, warning=FALSE, results=FALSE}
# Load packages
library(shiny)
library(ggplot2)
library(plotly)
library(dplyr)
library(knitr)
```

This project reviews the dietary intake over the 24-hour period prior to the interview of Americans 1 year or older between 2017 and March of 2020, as collected in the National Health and Nutrition Examination Survey is a survey. This data set includes dietary information from the first interview and is a log of the total energy and nutrient intakes, including the macronutrients (carbohydrates, fats, and proteins) and vitamins, from foods and beverages within the previous 24-hours. The project analyzes whether participants intended diet (macronutrient dietary intention) aligns with their actual food consumption (dietary intake). Additionally, it assesses the relationship between dietary intake and the B vitamins intake. B vitamins are cofactors for many cellular pathways, including cellular metabolism and synthesis of DNA and RNA, but are not stored by the body, so it is critical to replenish them daily through foods and supplements (Hanna et al, 2022). Therefore, this analysis is to assess if Americans 1 year or older are eating their intended macronutrient diet and if their intake is associated with B vitamin levels pre-pandemic (2017-March 2020).

```{r,, echo=FALSE, message=FALSE, warning=FALSE}
# Recreation of Figure 3
create_summary_plot <- function(data, cat_var, cont_var) {
  # Convert the categorical variable to a factor
  data[[cat_var]] <- as.factor(data[[cat_var]])
  filtered_data <- data %>% filter(is.finite(!!sym(cont_var)))

  # Create a mapping for human-readable titles
  title_map <- c(
    "Low_Sugar" = "Low Sugar",
    "Low_Carbohydrate" = "Low Carbohydrate",
    "Low_Fat" = "Low Fat",
    "High_Protein" = "High Protein"
  )

  # Create the box plot with color based on the categorical variable
  box_plot <- ggplot(filtered_data, aes_string(x = cat_var, y = cont_var, fill = cat_var)) +
    geom_boxplot() +
    labs(x = paste(title_map[cat_var], "(yes/no)"), y = cont_var) +  # Use mapped title for x-axis label
    ggtitle(paste(cont_var, "Intake for", title_map[cat_var], "Diet Intention")) +  # Use mapped title for plot title
    theme_minimal() +
    scale_fill_manual(values = c("lightblue", "lightgreen")) +
    theme(legend.position = "none")

  # Create the summary table
  summary_table <- data %>%
    group_by(!!sym(cat_var)) %>%
    summarize(
      Mean = mean(!!sym(cont_var), na.rm = TRUE),
      Median = median(!!sym(cont_var), na.rm = TRUE),
      Min = min(!!sym(cont_var), na.rm = TRUE),
      Max = max(!!sym(cont_var), na.rm = TRUE),
      Count = n(),
      .groups = 'drop'
    )

  # Return the plot and summary table separately
  return(list(plot = box_plot, summary_table = summary_table))
}

# Sample data (replace this with your actual dataset)
# For demonstration, let's create a sample dataset
set.seed(123)
extracted_data <- data.frame(
  Low_Sugar = sample(c(0, 1), 100, replace = TRUE),
  Low_Carbohydrate = sample(c(0, 1), 100, replace = TRUE),
  Low_Fat = sample(c(0, 1), 100, replace = TRUE),
  High_Protein = sample(c(0, 1), 100, replace = TRUE),
  Sugar = rnorm(100, 10, 2),
  Carbohydrate = rnorm(100, 50, 10),
  Fat = rnorm(100, 20, 5),
  Protein = rnorm(100, 30, 7)
)

# Define the UI for the app
ui <- fluidPage(
  titlePanel("Interactive R Diet Intake Analysis"),
  
  sidebarLayout(
    sidebarPanel(
      selectInput("diet", "Select Diet Type:",
                  choices = c("Low_Sugar", "Low_Carbohydrate", "Low_Fat", "High_Protein")),
      selectInput("nutrient", "Select Nutrient:",
                  choices = c("Sugar", "Carbohydrate", "Fat", "Protein"))
    ),
    
    mainPanel(
      plotlyOutput("boxPlot"),
      tableOutput("summaryTable")
    )
  )
)

# Define the server logic
server <- function(input, output) {
  
  # Reactive expression to generate plot and summary
  reactive_plot_data <- reactive({
    create_summary_plot(extracted_data, input$diet, input$nutrient)
  })
  
  # Render the plotly box plot
  output$boxPlot <- renderPlotly({
    plot_data <- reactive_plot_data()
    
    # Convert the ggplot object to plotly for interactivity
    ggplotly(plot_data$plot)
  })
  
  # Render the summary table
  output$summaryTable <- renderTable({
    plot_data <- reactive_plot_data()
    
    # Render the summary table
    kable(plot_data$summary_table, caption = "Summary Statistics", 
          col.names = c("Diet Type", "Mean", "Median", "Min", "Max", "Count"))
  })
}

# Run the application
shinyApp(ui = ui, server = server)
```
